/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme;

import dialog.IzmeniKorisnikaDialog;
import domen.Grad;
import domen.Korisnik;
import domen.Radnik;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import kontroler.KlijentController;
import model.KorisnikTableModel;
import transfer.ServerskiOdgovor;

/**
 *
 * @author Darko
 */
public class KorisniciForma extends javax.swing.JFrame {

    /**
     * Creates new form Korisnici
     */
    private Radnik prijavljeni;
    private KlijentController kom;
    private Korisnik izabraniKorisnik;
    
    public KorisniciForma(Radnik r) throws IOException, ClassNotFoundException {
        initComponents();
        setLocationRelativeTo(null);
        kom = KlijentController.getInstance();
        popuniKorisnike(null);
        popuniGrad();
        this.prijavljeni = r;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        gradComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        imeField = new javax.swing.JTextField();
        prezimeField = new javax.swing.JTextField();
        jmbgField = new javax.swing.JTextField();
        kreirajButton = new javax.swing.JButton();
        promeniButton = new javax.swing.JButton();
        obrisiButton = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        korisniciMenu = new javax.swing.JMenuItem();
        tiketiMenu = new javax.swing.JMenuItem();
        poslovniceMenu = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        logout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(770, 520));
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Grad:");

        gradComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Ime:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Prezime:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("JMBG:");

        imeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imeFieldActionPerformed(evt);
            }
        });

        prezimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prezimeFieldActionPerformed(evt);
            }
        });

        jmbgField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmbgFieldActionPerformed(evt);
            }
        });

        kreirajButton.setText("Kreiraj Novog Korisnika");
        kreirajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kreirajButtonActionPerformed(evt);
            }
        });

        promeniButton.setText("Promeni Korisnika");
        promeniButton.setEnabled(false);
        promeniButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                promeniButtonActionPerformed(evt);
            }
        });

        obrisiButton.setText("Obrisi Korisnika");
        obrisiButton.setEnabled(false);
        obrisiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obrisiButtonActionPerformed(evt);
            }
        });

        jMenu6.setText("Stranice");

        korisniciMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        korisniciMenu.setText("Korisnici");
        korisniciMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                korisniciMenuActionPerformed(evt);
            }
        });
        jMenu6.add(korisniciMenu);

        tiketiMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        tiketiMenu.setText("Tiketi");
        tiketiMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiketiMenuActionPerformed(evt);
            }
        });
        jMenu6.add(tiketiMenu);

        poslovniceMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        poslovniceMenu.setText("Poslovnice");
        poslovniceMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poslovniceMenuActionPerformed(evt);
            }
        });
        jMenu6.add(poslovniceMenu);

        jMenuBar2.add(jMenu6);

        jMenu7.setText("Akcije");

        logout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jMenu7.add(logout);

        jMenuBar2.add(jMenu7);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gradComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(prezimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(promeniButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jmbgField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(obrisiButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(imeField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(kreirajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 124, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(kreirajButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gradComboBox)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(imeField, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(prezimeField, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(promeniButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jmbgField, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(obrisiButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gradComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradComboBoxActionPerformed
        Grad g = (Grad) gradComboBox.getSelectedItem();
        popuniKorisnike(g);
    }//GEN-LAST:event_gradComboBoxActionPerformed

    private void imeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imeFieldActionPerformed
        osveziKorisnik();
    }//GEN-LAST:event_imeFieldActionPerformed

    private void prezimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prezimeFieldActionPerformed
        osveziKorisnik();
    }//GEN-LAST:event_prezimeFieldActionPerformed

    private void jmbgFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmbgFieldActionPerformed
        osveziKorisnik();
    }//GEN-LAST:event_jmbgFieldActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
        int selectedRow = jTable1.getSelectedRow();
        
        if(selectedRow != -1){
            promeniButton.setEnabled(true);
            obrisiButton.setEnabled(true);
            
            if (selectedRow != -1) {
            KorisnikTableModel model = (KorisnikTableModel) jTable1.getModel();
            int korisnikId = (int) model.getValueAt(selectedRow, 0);

            try {
                Korisnik k = new Korisnik();
                k.setIdKorisnik(korisnikId);
                ServerskiOdgovor so = KlijentController.getInstance().pretraziKorisnika(k);
                if (so.isUspesno()) {
                    Korisnik korisnik = (Korisnik) so.getOdgovor();
                    izabraniKorisnik = korisnik;
                } else {
                    JOptionPane.showMessageDialog(this, "Neuspešno učitavanje korisnika: " + so.getPoruka(),
                            "Greška", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Greška: " + ex.getMessage(),
                        "Greška", JOptionPane.ERROR_MESSAGE);
            }
        }
                       
        }else{
            promeniButton.setEnabled(false);
            obrisiButton.setEnabled(false);
        }
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void obrisiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obrisiButtonActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this,
                "Da li ste sigurni da želite da obrišete korisnika: " 
                + izabraniKorisnik.getIme() + " " + izabraniKorisnik.getPrezime() + "?",
                "Potvrda", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                ServerskiOdgovor so = kom.obrisiKorisnik(izabraniKorisnik);
                if (so.isUspesno()) {
                    JOptionPane.showMessageDialog(this, "Korisnik obrisan!");
                    popuniKorisnike(null);
                } else {
                    JOptionPane.showMessageDialog(this, "Greška: " + so.getPoruka());
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Greška pri brisanju: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_obrisiButtonActionPerformed

    private void promeniButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_promeniButtonActionPerformed
        try {
            IzmeniKorisnikaDialog dialog = new IzmeniKorisnikaDialog(this, true, izabraniKorisnik);
            dialog.setVisible(true);
        } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Greška: " + ex.getMessage(),
                        "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_promeniButtonActionPerformed

    private void kreirajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kreirajButtonActionPerformed
        try {
            ServerskiOdgovor so = kom.kreirajKorisnik(new Korisnik());
            if(so.isUspesno()){
                System.out.println("Uspesno");
                IzmeniKorisnikaDialog dialog = new IzmeniKorisnikaDialog(this, true, (Korisnik) so.getOdgovor());
                dialog.setVisible(true);
            }else{
                JOptionPane.showMessageDialog(this, "Greška: " + so.getPoruka());
            }
        } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Greška: " + ex.getMessage(),
                        "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_kreirajButtonActionPerformed

    private void korisniciMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_korisniciMenuActionPerformed
        try {
            KorisniciForma korisniciForma = new KorisniciForma(prijavljeni);
            korisniciForma.setVisible(true);
            this.dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Greška pri otvaranju korisnici forme: " + ex.getMessage(),
                "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_korisniciMenuActionPerformed

    private void tiketiMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tiketiMenuActionPerformed
        try {
            TiketiForma tiketiForma = new TiketiForma(prijavljeni);
            tiketiForma.setVisible(true);
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Greška pri otvaranju Tiketi forme: " + e.getMessage(),
                    "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tiketiMenuActionPerformed

    private void poslovniceMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poslovniceMenuActionPerformed
    }//GEN-LAST:event_poslovniceMenuActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        try {
            kom.logout();
            this.dispose();
        } catch (IOException ex) {
            Logger.getLogger(TiketiForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_logoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Grad> gradComboBox;
    private javax.swing.JTextField imeField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jmbgField;
    private javax.swing.JMenuItem korisniciMenu;
    private javax.swing.JButton kreirajButton;
    private javax.swing.JMenuItem logout;
    private javax.swing.JButton obrisiButton;
    private javax.swing.JMenuItem poslovniceMenu;
    private javax.swing.JTextField prezimeField;
    private javax.swing.JButton promeniButton;
    private javax.swing.JMenuItem tiketiMenu;
    // End of variables declaration//GEN-END:variables

    public void popuniKorisnike(Object kriterijum) {
        try{
            ServerskiOdgovor so = null;
            
            if(kriterijum == null){
                so = kom.vratiListuSviKorisnik();
            }else if(kriterijum instanceof Grad){
                so = kom.vratiListuKorisnikKriterijumGrad((Grad) kriterijum);
            }else if(kriterijum instanceof Korisnik){
                so = kom.vratiListuKorisnikKriterijumKorisnik((Korisnik) kriterijum);
            }else{
                JOptionPane.showMessageDialog(this,
                    "Nepoznat kriterijum: " + kriterijum.getClass().getSimpleName(),
                    "Greška", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(so != null && so.isUspesno()){
                List<Korisnik> korisnici = (List<Korisnik>) so.getOdgovor();
                KorisnikTableModel model = new KorisnikTableModel(korisnici);
                jTable1.setModel(model);
                jTable1.getColumnModel().getColumn(0).setMinWidth(0);
                jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
                jTable1.getColumnModel().getColumn(0).setWidth(0);
            }else {
                JOptionPane.showMessageDialog(this,
                        "Neuspešno učitavanje korisnika: " + so.getPoruka(),
                        "Greška", JOptionPane.ERROR_MESSAGE);
            }
        }catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Greška pri učitavanju korisnika: " + e.getMessage(),
                    "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void popuniGrad() throws IOException, ClassNotFoundException {
        try{
            ServerskiOdgovor so = kom.vratiListuSviGrad();
            
            if(so.isUspesno()){
                List<Grad> gradovi  = (List<Grad>) so.getOdgovor();
                DefaultComboBoxModel<Grad> model = new DefaultComboBoxModel<>();
                for (Grad g : gradovi) {
                    model.addElement(g);
                }
                
                gradComboBox.setModel(model);
            }else {
                JOptionPane.showMessageDialog(this,
                        "Ne mogu da učitam listu gradova: " + so.getPoruka(),
                        "Greška", JOptionPane.ERROR_MESSAGE);
            }
        }catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Greška pri učitavanju gradova: " + e.getMessage(),
                    "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void osveziKorisnik() {
        String ime = imeField.getText().trim();
        String prezime = prezimeField.getText().trim();
        String jmbg = jmbgField.getText().trim();

        Korisnik k = new Korisnik();
        
        k.setIme(ime);
        k.setPrezime(prezime);
        k.setJmbg(jmbg);

        popuniKorisnike(k);
    }
}
