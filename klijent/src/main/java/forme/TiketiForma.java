/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme;

import dialog.DodajPoslovnicuDialog;
import dialog.PogledajTiketDialog;
import domen.Korisnik;
import domen.Radnik;
import domen.Tiket;
import domen.Utakmica;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import kontroler.KlijentController;
import model.TiketTableModel;
import transfer.ServerskiOdgovor;

/**
 *
 * @author Darko
 */
public class TiketiForma extends javax.swing.JFrame {

    private Tiket trenutniTiket = new Tiket();
    private Radnik prijavljeni;
    
    private KlijentController kom;
    public TiketiForma(Radnik prijavljeni) throws IOException, ClassNotFoundException {
        initComponents();
        setLocationRelativeTo(null);
        kom = KlijentController.getInstance();
        popuniRadnike();
        popuniKorisnike();
        popuniUtakmice();
        popuniTikete(trenutniTiket);
        this.prijavljeni = prijavljeni;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        radnikComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        korisnikComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        utakmicaComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        kvotaField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        dobitakField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ulogField = new javax.swing.JTextField();
        statusComboBox = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        kreirajTiketButton = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        korisniciMenu = new javax.swing.JMenuItem();
        tiketiMenu = new javax.swing.JMenuItem();
        poslovniceMenu = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        logout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(770, 520));
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Radnik:");

        radnikComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radnikComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Korisnik:");

        korisnikComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                korisnikComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Utakmica:");

        utakmicaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utakmicaComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Minimalna ukupna kvota:");

        kvotaField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kvotaFieldActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Minimalni dobitak:");

        dobitakField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dobitakFieldActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Status tiketa:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Minimalni ulog:");

        ulogField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ulogFieldActionPerformed(evt);
            }
        });

        statusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Izaberi--", "U Toku", "Dobitan", "Gubitan" }));
        statusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusComboBoxActionPerformed(evt);
            }
        });

        jButton2.setText("Pogledaj detaljnije");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        kreirajTiketButton.setText("Kreiraj Tiket");
        kreirajTiketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kreirajTiketButtonActionPerformed(evt);
            }
        });

        jMenu6.setText("Stranice");

        korisniciMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        korisniciMenu.setText("Korisnici");
        korisniciMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                korisniciMenuActionPerformed(evt);
            }
        });
        jMenu6.add(korisniciMenu);

        tiketiMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        tiketiMenu.setText("Tiketi");
        tiketiMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiketiMenuActionPerformed(evt);
            }
        });
        jMenu6.add(tiketiMenu);

        poslovniceMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        poslovniceMenu.setText("Poslovnice");
        poslovniceMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poslovniceMenuActionPerformed(evt);
            }
        });
        jMenu6.add(poslovniceMenu);

        jMenuBar2.add(jMenu6);

        jMenu7.setText("Akcije");

        logout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jMenu7.add(logout);

        jMenuBar2.add(jMenu7);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radnikComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(korisnikComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(utakmicaComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(kvotaField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dobitakField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(statusComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ulogField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(kreirajTiketButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(radnikComboBox)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(kvotaField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(korisnikComboBox, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(dobitakField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                        .addGap(0, 9, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ulogField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kreirajTiketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(statusComboBox)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(utakmicaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radnikComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radnikComboBoxActionPerformed
        Radnik r = (Radnik) radnikComboBox.getSelectedItem();
        popuniTikete(r);
    }//GEN-LAST:event_radnikComboBoxActionPerformed

    private void korisnikComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_korisnikComboBoxActionPerformed
        Korisnik k = (Korisnik) korisnikComboBox.getSelectedItem();
        popuniTikete(k);
    }//GEN-LAST:event_korisnikComboBoxActionPerformed

    private void utakmicaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utakmicaComboBoxActionPerformed
        Utakmica u = (Utakmica) utakmicaComboBox.getSelectedItem();
        popuniTikete(u);
    }//GEN-LAST:event_utakmicaComboBoxActionPerformed

    private void kvotaFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kvotaFieldActionPerformed
        osveziTiket();
    }//GEN-LAST:event_kvotaFieldActionPerformed

    private void dobitakFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dobitakFieldActionPerformed
        osveziTiket();
    }//GEN-LAST:event_dobitakFieldActionPerformed

    private void ulogFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ulogFieldActionPerformed
        osveziTiket();
    }//GEN-LAST:event_ulogFieldActionPerformed

    private void statusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusComboBoxActionPerformed
        osveziTiket();
    }//GEN-LAST:event_statusComboBoxActionPerformed

    private void korisniciMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_korisniciMenuActionPerformed
        try {
            KorisniciForma korisniciForma = new KorisniciForma(prijavljeni);
            korisniciForma.setVisible(true);
            this.dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Greška pri otvaranju korisnici forme: " + ex.getMessage(),
                    "Greška", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_korisniciMenuActionPerformed

    private void tiketiMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tiketiMenuActionPerformed
        
    }//GEN-LAST:event_tiketiMenuActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            TiketTableModel model = (TiketTableModel) jTable1.getModel();
            int tiketId = (int) model.getValueAt(selectedRow, 0);

            try {
                Tiket t = new Tiket();
                t.setIdTiket(tiketId);
                ServerskiOdgovor so = KlijentController.getInstance().pretraziTiket(t);
                if (so.isUspesno()) {
                    Tiket tiket = (Tiket) so.getOdgovor();
                    PogledajTiketDialog dialog = new PogledajTiketDialog(this, true, tiket);
                    dialog.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Neuspešno učitavanje tiketa: " + so.getPoruka(),
                            "Greška", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Greška: " + ex.getMessage(),
                        "Greška", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if(jTable1.getSelectedRow() != -1){
            jButton2.setEnabled(true);
        }else{
            jButton2.setEnabled(false);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void poslovniceMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poslovniceMenuActionPerformed
        DodajPoslovnicuDialog dialog = new DodajPoslovnicuDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_poslovniceMenuActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        try {
            kom.logout();
            this.dispose();
        } catch (IOException ex) {
            Logger.getLogger(TiketiForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_logoutActionPerformed

    private void kreirajTiketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kreirajTiketButtonActionPerformed
        try {
            Tiket t = new Tiket();
            Korisnik k = new Korisnik();
            k.setIdKorisnik(4);
            t.setKorisnik(k);
            t.setRadnik(prijavljeni);

            ServerskiOdgovor so = kom.kreirajTiket(t);
            Tiket t1 = (Tiket) so.getOdgovor();

            if (so.isUspesno()) {
                JOptionPane.showMessageDialog(this,
                    "Tiket uspešno kreiran. ID tiketa: " + t1.getIdTiket());
                this.dispose();

                KreirajTiketForma kreirajForma = new KreirajTiketForma(t1, prijavljeni);
                kreirajForma.setVisible(true);

            } else {
                JOptionPane.showMessageDialog(this,
                    "Neuspešno kreiranje tiketa: " + so.getPoruka(),
                    "Greška", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Greška pri kreiranju tiketa: " + e.getMessage(),
                "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_kreirajTiketButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {}
    
    private void popuniRadnike() {
        try {
            ServerskiOdgovor so = kom.vratiListuSviRadnik();

            if (so.isUspesno()) {
                List<Radnik> radnici = (List<Radnik>) so.getOdgovor();
                
               
                DefaultComboBoxModel<Radnik> model = new DefaultComboBoxModel<>();
                for (Radnik r : radnici) {
                    model.addElement(r);
                }

                radnikComboBox.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Ne mogu da učitam listu radnika: " + so.getPoruka(),
                        "Greška", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Greška pri učitavanju radnika: " + e.getMessage(),
                    "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void popuniKorisnike() {
        try {
            ServerskiOdgovor so = kom.vratiListuSviKorisnik();

            if (so.isUspesno()) {
                List<Korisnik> korisnici = (List<Korisnik>) so.getOdgovor();
                
               
                DefaultComboBoxModel<Korisnik> model = new DefaultComboBoxModel<>();
                for (Korisnik k : korisnici) {
                    model.addElement(k);
                }

                korisnikComboBox.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Ne mogu da učitam listu korisnika: " + so.getPoruka(),
                        "Greška", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Greška pri učitavanju korisnika: " + e.getMessage(),
                    "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void popuniUtakmice() {
        try {
            ServerskiOdgovor so = kom.vratiListuSviUtakmica();

            if (so.isUspesno()) {
                List<Utakmica> utakmice = (List<Utakmica>) so.getOdgovor();
                
               
                DefaultComboBoxModel<Utakmica> model = new DefaultComboBoxModel<>();
                for (Utakmica u : utakmice) {
                    model.addElement(u);
                }

                utakmicaComboBox.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Ne mogu da učitam listu utakmica: " + so.getPoruka(),
                        "Greška", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Greška pri učitavanju utakmica: " + e.getMessage(),
                    "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void osveziTiket() {
        String kvotaText = kvotaField.getText().trim();
        String ulogText = ulogField.getText().trim();
        String dobitakText = dobitakField.getText().trim();

        double kvota = kvotaText.isEmpty() ? 0.0 : Double.parseDouble(kvotaText);
        double ulog = ulogText.isEmpty() ? 0.0 : Double.parseDouble(ulogText);
        double dobitak = dobitakText.isEmpty() ? 0.0 : Double.parseDouble(dobitakText);
        int status = statusComboBox.getSelectedIndex() - 1;

        Tiket t = new Tiket();
        
        t.setUkupnaKvota(kvota);
        t.setUlog(ulog);
        t.setMoguciDobitak(dobitak);
        t.setStatus(status);

        popuniTikete(t);
    }

    
    public void popuniTikete(Object kriterijum){
        try {
            ServerskiOdgovor so = null;
            
            if(kriterijum instanceof Tiket){
                so = kom.vratiListuTiketKriterijumTiket((Tiket) kriterijum);
            }else if(kriterijum instanceof Radnik){
                so = kom.vratiListuTiketKriterijumRadnik((Radnik) kriterijum);
            }else if(kriterijum instanceof Korisnik){
                so = kom.vratiListuTiketKriterijumKorisnik((Korisnik) kriterijum);
            }else if(kriterijum instanceof Utakmica){
                so = kom.vratiListuTiketKriterijumUtakmica((Utakmica) kriterijum);
            }else{
                JOptionPane.showMessageDialog(this,
                    "Nepoznat kriterijum: " + kriterijum.getClass().getSimpleName(),
                    "Greška", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (so != null && so.isUspesno()) {
                List<Tiket> tiketi = (List<Tiket>) so.getOdgovor();
                TiketTableModel model = new TiketTableModel(tiketi);
                jTable1.setModel(model);
                jTable1.getColumnModel().getColumn(0).setMinWidth(0);
                jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
                jTable1.getColumnModel().getColumn(0).setWidth(0);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Neuspešno učitavanje tiketa: " + so.getPoruka(),
                        "Greška", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Greška pri učitavanju tiketa: " + e.getMessage(),
                    "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dobitakField;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenuItem korisniciMenu;
    private javax.swing.JComboBox<Korisnik> korisnikComboBox;
    private javax.swing.JButton kreirajTiketButton;
    private javax.swing.JTextField kvotaField;
    private javax.swing.JMenuItem logout;
    private javax.swing.JMenuItem poslovniceMenu;
    private javax.swing.JComboBox<Radnik> radnikComboBox;
    private javax.swing.JComboBox<String> statusComboBox;
    private javax.swing.JMenuItem tiketiMenu;
    private javax.swing.JTextField ulogField;
    private javax.swing.JComboBox<Utakmica> utakmicaComboBox;
    // End of variables declaration//GEN-END:variables
}
